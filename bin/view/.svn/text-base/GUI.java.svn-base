package view;

import exceptions.ItemNotFoundException;
import flickr.Flickr;
import flickr.Photo;
import graph.Graph;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

import javax.swing.AbstractAction;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.SwingWorker;

import walkr.Walkr;

public class GUI {

	protected JFrame frame;
	private Graph graph;
	private JTextField from;
	private JTextField toward;
	protected Walkr walkr;
	private ArrayList<ImageIcon> listPhotos = new ArrayList<ImageIcon>();
	protected ArrayList<ImageIcon> photoArray = new ArrayList<ImageIcon>();
	protected ArrayList<Photo> photos = new ArrayList<Photo>();
	protected ImageIcon curPhoto;
	protected JLabel picture, tracker, lblFrom, lblToward;
	private Dimension listDims, pictureDims, mapDims;
	protected ImageIcon noPicture;
	protected String skin = "yellow";
	protected ImageIcon redditAlien = new ImageIcon("images/redditAlien.png");
	protected ImageIcon cameraIcon = new ImageIcon("images/camera.png");
	protected ImageIcon flagIcon = new ImageIcon("images/flag.png");
	protected ImageIcon redDotIcon = new ImageIcon("images/red_dot.png");
	protected ImageIcon nextIcon = new ImageIcon("images/" + skin + "/right_arrow.png");
	protected ImageIcon prevIcon = new ImageIcon("images/" + skin + "/left_arrow.png");
	protected MapView mapView;
	protected JList list;
	protected JCheckBoxMenuItem enableTracker;
	private int currentPhoto = 0;
	protected boolean trackerEnabled = true;
	private Icon currentTrackerIcon = redditAlien;
	private JButton btnPrev, btnNext;
	private JLabel loadingIcon, mapLoading;
	protected boolean done;

	/** 
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUI window = new GUI();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public GUI() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		try {
			noPicture = new ImageIcon(new URL("http://www.designofsignage.com/application/symbol/building/image/600x600/no-photo.jpg"));
		} catch (MalformedURLException e2) {
			System.out.println("URL no longer exists for no picture icon");
			e2.printStackTrace();
		}

		listDims = new Dimension(1153, 180);
		pictureDims = new Dimension(502, 551);
		mapDims = new Dimension(639, 601);
		frame = new JFrame();		
		frame.setResizable(false);
		frame.getContentPane().setForeground(Color.WHITE);
		frame.setBackground(Color.WHITE);
		frame.setTitle("Walkr: Find a Walking Tour in Pictures");
		frame.setBounds(100, 100, 1182, 921);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		SwingWorker<Graph,Void> graphBuilder = new SwingWorker<Graph, Void>(){

			@Override
			protected Graph doInBackground() throws Exception {
				return new Graph("nodes.json");
			}
			public void done(){
				try {
					graph = get();
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (ExecutionException e) {
					e.printStackTrace();
				}
				walkr = new Walkr(graph);
				mapView = new MapView(walkr, 639, 601);
				mapView.setBounds(6, 48, 639, 601);
				mapView.setAlignmentY(Component.TOP_ALIGNMENT);
				mapView.setAlignmentX(Component.LEFT_ALIGNMENT);
				mapView.setFrame(frame);
				mapView.setTextFields(from, toward);
				frame.getContentPane().add(mapView);
				mapView.repaint();
				mapLoading.setVisible(false);
				done = true;
			}
		};
		done = false;
		graphBuilder.execute();
		
		JButton routeButton = new JButton("Calculate Route");
		routeButton.setBounds(286, 7, 148, 29);
		frame.getContentPane().add(routeButton);
		routeButton.addActionListener(new AbstractAction() {

			private static final long serialVersionUID = 1L;

			@Override
			public void actionPerformed(ActionEvent e) {
				putValue(MNEMONIC_KEY,KeyEvent.VK_ENTER);
				String towardstr = toward.getText();
				String fromstr = from.getText();
				if(done){
				if(towardstr != null && fromstr != null){
					try {
						loadingIcon.setVisible(true);
						walkr.findShortestPath(fromstr, towardstr);
					} catch (ItemNotFoundException e1) {
						loadingIcon.setVisible(false);
						JOptionPane.showMessageDialog(frame, "Sorry, no path found.  Please try again.", "No path found", JOptionPane.WARNING_MESSAGE);
					}
					if(walkr.hasPath()){
						photoArray = new ArrayList<ImageIcon>();
						if(listPhotos.size() != 0)
							listPhotos.clear();
						mapView.repaint();
						curPhoto= noPicture;
						SwingWorker<ArrayList<ImageIcon>,Void> worker = new SwingWorker<ArrayList<ImageIcon>, Void>(){
							private ArrayList<ImageIcon> tempPhotoArray = new ArrayList<ImageIcon>();
							private ArrayList<ImageIcon> tempListPhotos = new ArrayList<ImageIcon>(); 
							@Override
							protected ArrayList<ImageIcon> doInBackground()
									throws Exception {
								photos = walkr.getPath().getPhotos();
								for(Photo p: photos) {
									ImageIcon temp;
									if(p!=null){
									temp = new ImageIcon(Flickr.getImage(p));
									//temp = new ImageIcon(Flickr.getImage("http://farm"+p.getFarmID() + ".static.flickr.com/"
										//		+ p.getServerID() + "/" + p.getImageID() + "_" + p.getSecret() + ".jpg"));
									tempPhotoArray.add(temp);
									ImageIcon thumb = new ImageIcon(temp.getImage().getScaledInstance(160, 160, Image.SCALE_SMOOTH));
									tempListPhotos.add(thumb);
									System.out.println("Fetching foto:" + p.getTitle());
									}	
								}
								return tempListPhotos;
							}
							public void done(){
								try {
									listPhotos = get();
									photoArray = tempPhotoArray;
									list.setListData(listPhotos.toArray());
									currentPhoto = 0;
									if (photoArray.size() > 0) {
										curPhoto = photoArray.get(currentPhoto);
										picture.setIcon(curPhoto);
										list.updateUI();
										Photo locationPhoto = photos.get(currentPhoto);
										if(locationPhoto != null){
											int x = walkr.getMap().longitudeToX(Double.parseDouble(locationPhoto.getLongitude()));
											int y = walkr.getMap().latitudeToY(Double.parseDouble(locationPhoto.getLatitude()));
											tracker.setLocation(x-20, y+25);
											tracker.setVisible(trackerEnabled);
										}
									}
									loadingIcon.setVisible(false);
									done = true;
								} catch (InterruptedException e) {
									e.printStackTrace();
								} catch (ExecutionException e) {
									e.printStackTrace();
								}
							}
						
						};
						done = false;
						worker.execute();
					}
				}
			} else {
				JOptionPane.showMessageDialog(frame, "Still loading, please stand by.", "Please stand by.", JOptionPane.WARNING_MESSAGE);
			}
			}
		});
		
		from = new JTextField();
		from.setBounds(82, 10, 60, 26);
		frame.getContentPane().add(from);
		from.setColumns(10);
		
		toward = new JTextField();
		toward.setBounds(198, 10, 60, 26);
		frame.getContentPane().add(toward);
		toward.setColumns(10);

		lblFrom = new JLabel("Start:");
		lblFrom.setHorizontalAlignment(SwingConstants.CENTER);
		lblFrom.setBounds(27, 13, 60, 14);
		frame.getContentPane().add(lblFrom);
		
		lblToward = new JLabel("End:");
		lblToward.setHorizontalAlignment(SwingConstants.CENTER);
		lblToward.setBounds(142, 13, 60, 14);
		frame.getContentPane().add(lblToward);
		
		btnPrev = new JButton(prevIcon);
		btnPrev.setBounds(874, 13, 54, 27);
		btnPrev.addActionListener(new AbstractAction() {

			private static final long serialVersionUID = 1L;

			public void actionPerformed(ActionEvent e) {
				putValue(MNEMONIC_KEY,KeyEvent.VK_LEFT);
				prevPhoto();
			}
			
		});
		frame.getContentPane().add(btnPrev);
		
		btnNext = new JButton(nextIcon);
		btnNext.setBounds(934, 13, 54, 27);
		btnNext.addActionListener(new AbstractAction() {

			private static final long serialVersionUID = 1L;

			@Override
			public void actionPerformed(ActionEvent e) {
				putValue(MNEMONIC_KEY,KeyEvent.VK_RIGHT);
				nextPhoto();
			}
			
		});
		
		frame.getContentPane().add(btnNext);
		
		picture = new JLabel();
		picture.setHorizontalAlignment(SwingConstants.LEFT);
		picture.setVerticalAlignment(SwingConstants.TOP);
		picture.setBounds(657, 48, 502, 551);
		frame.getContentPane().add(picture);
		noPicture = new ImageIcon(noPicture.getImage().getScaledInstance(502, 551,Image.SCALE_DEFAULT));
		picture.setIcon(noPicture);
		
		tracker = new JLabel();
		tracker.setIcon(currentTrackerIcon);
		tracker.setBounds(485, 245, 41, 50);
		frame.getContentPane().add(tracker);
		tracker.setVisible(false); //initialize tracker to not be visible since there are no paths
		

		Image mapLoadImg = Toolkit.getDefaultToolkit().createImage("images/map_loading.gif");
		mapLoading = new JLabel(new ImageIcon(mapLoadImg));
		mapLoading.setBounds(6, 48, 639, 601);
		frame.getContentPane().add(mapLoading);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		scrollPane.setBounds(6, 661,1153, 180);
		frame.getContentPane().add(scrollPane);
		
		list = new JList();
		scrollPane.setViewportView(list);
		list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
		list.setVisibleRowCount(1);
		list.setListData(listPhotos.toArray());
		Image loading = Toolkit.getDefaultToolkit().createImage("images/LoadingImg.gif");
		
		loadingIcon = new JLabel(new ImageIcon(loading));
		loadingIcon.setBounds(446, 13, 22, 22);
		loadingIcon.setVisible(false);
		frame.getContentPane().add(loadingIcon);
		list.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if (photoArray.size() != 0){
					int location = list.getSelectedIndex();
					curPhoto = photoArray.get(location);
					picture.setIcon(curPhoto);
					currentPhoto = location;
					Photo locationPhoto = photos.get(currentPhoto);
					if(locationPhoto != null) {
						int x = walkr.getMap().longitudeToX(Double.parseDouble(locationPhoto.getLongitude()));
						int y = walkr.getMap().latitudeToY(Double.parseDouble(locationPhoto.getLatitude()));
						tracker.setLocation(x-20, y+25);
					}
				}
			}
		});
		
		
		
		//menubar for changing which tags to search for, help, etc
		JMenuBar menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("Menu");
		menuBar.add(mnFile);
		
		JMenuItem preferences = new JMenuItem("Preferences");
		preferences.setName("Preferences");
		preferences.addActionListener(new ActionListener () {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				PreferencesPanel preferencesPanel = new PreferencesPanel();
				preferencesPanel.setVisible(true);
			}
			
		});
		mnFile.add(preferences);
		
		JMenuItem mntmAbout = new JMenuItem("About");
		mntmAbout.addActionListener(new AbstractAction() {

			private static final long serialVersionUID = 7985034711717902334L;

			@Override
			public void actionPerformed(ActionEvent arg0) {
				new aboutDialog();
			}
			
		});
		mnFile.add(mntmAbout);
		
		JMenuItem mntmHelp = new JMenuItem("Help");
		mntmHelp.addActionListener(new AbstractAction() {

			private static final long serialVersionUID = -6614021417819782682L;

			@Override
			public void actionPerformed(ActionEvent arg0) {
				new helpDialog();
			}
			
		});
		mnFile.add(mntmHelp);
		
		JMenuItem mntmClose = new JMenuItem("Close");
		mnFile.add(mntmClose);
		mntmClose.addActionListener(new AbstractAction() {
			private static final long serialVersionUID = 1L;

		public void actionPerformed(ActionEvent e) {System.exit(0);}});

	}
	
	
	protected void nextPhoto() { //put the current photo
		if(photoArray == null || photoArray.isEmpty()) //&& prevPhotos.isEmpty())
			JOptionPane.showMessageDialog(frame, "No photos have been found yet!\nPlease pick a route by clicking two points on the map,\nOR \nType in the start and end points by label name.\n" +
					"Then, click the 'Calculate Route' button.", "No photos yet!", JOptionPane.ERROR_MESSAGE);
		else {
			if(photoArray.size() > currentPhoto + 1) {
				int index = list.getSelectedIndex();
				curPhoto = photoArray.get(++currentPhoto);
				picture.setIcon(curPhoto);
				Photo locationPhoto = photos.get(currentPhoto);
				if(index > -1) {
					list.setSelectedIndex(index++);
				}
				if(locationPhoto != null) {
					int x = walkr.getMap().longitudeToX(Double.parseDouble(locationPhoto.getLongitude()));
					int y = walkr.getMap().latitudeToY(Double.parseDouble(locationPhoto.getLatitude()));
					tracker.setLocation(x-20, y+25);
				}
			}
		}
	}
	
	protected void prevPhoto() {
		if(photoArray == null || photoArray.isEmpty())// && nextPhotos.isEmpty())
			JOptionPane.showMessageDialog(frame, "No photos have been found yet!\nPlease pick a route by clicking two points on the map,\nOR \nType in the start and end points by label name.\n" +
					"Then, click the 'Calculate Route' button.", "No photos yet!", JOptionPane.ERROR_MESSAGE);
		else {
			
			if(currentPhoto > 0) {
				int index = list.getSelectedIndex();
				curPhoto = photoArray.get(--currentPhoto);
				picture.setIcon(curPhoto);
				Photo locationPhoto = photos.get(currentPhoto);
				if(index > -1) {
					list.setSelectedIndex(index++);
				}
				if(locationPhoto != null) {
					int x = walkr.getMap().longitudeToX(Double.parseDouble(locationPhoto.getLongitude()));
					int y = walkr.getMap().latitudeToY(Double.parseDouble(locationPhoto.getLatitude()));
					tracker.setLocation(x-20, y+25);
				}
			}
		}
	}
	
	protected void setSkin(String color) {
		skin = color.toLowerCase();
		mapView.setSkin(skin);
		prevIcon = new ImageIcon("images/" + skin + "/left_arrow.png");
		nextIcon = new ImageIcon("images/" + skin + "/right_arrow.png");
		btnPrev.setIcon(prevIcon);
		btnNext.setIcon(nextIcon);
		if(skin.equals("yellow")) {
			frame.getContentPane().setBackground(Color.WHITE);
			lblFrom.setForeground(Color.BLACK);
			lblToward.setForeground(Color.BLACK);
		}
		if(skin.equals("black")) {
			frame.getContentPane().setBackground(Color.BLACK);
			lblFrom.setForeground(Color.WHITE);
			lblToward.setForeground(Color.WHITE);
		}
		if(skin.equals("green")){
			frame.getContentPane().setBackground(Color.GREEN);
			lblFrom.setForeground(Color.BLACK);
			lblToward.setForeground(Color.BLACK);
		}
	}
/**
 * 
 * @author krmckelv
 *
 */
	class aboutDialog extends JDialog {
    	
		private static final long serialVersionUID = -6996018570444040151L;

		public aboutDialog() {
    	    setTitle("Walkr: About");
    	    setBackground(Color.WHITE);
    	    setVisible(true);
    	    JPanel panel = new JPanel();
    	    add(panel);
    	    panel.setBackground(Color.WHITE);
    	    panel.setLayout(new FlowLayout());
    	    JTextPane name = new JTextPane();
    		StyledDocument doc = name.getStyledDocument();
    		MutableAttributeSet standard = new SimpleAttributeSet();
    		name.setFont(new Font("seriff",Font.PLAIN,18));
    		StyleConstants.setAlignment(standard, StyleConstants.ALIGN_CENTER);
    	    StyleConstants.setFontSize(standard, 14);
    		StyleConstants.setBold(standard, true);
    		doc.setParagraphAttributes(0,0,standard,true);
    		name.setStyledDocument(doc);
    	    name.setText("Created by:\n\n " +
    	    		"Phillip Pitzer <ppitzer@indiana.edu> " +
    	    		"\nFrank Mackey <fmackey@indiana.edu> " +
    	    		"\nKarissa McKelvey<krmckelv@indiana.edu> " +
    	    		"\n " +
    	    		"2010 " +
    	    		"\nIndiana University " +
    	    		"\n School of Informatics and Computing");
    	    JLabel soic = new JLabel();
    	    soic.setIcon(new ImageIcon("images/soic.jpg"));
    	    name.setEditable(false);
    	    name.setAlignmentX(0.5f);
    	    panel.add(name);
    	    panel.add(soic);
    	    setResizable(false);

    	    //add(Box.createRigidArea(new Dimension(0, 100)));
    	    setModalityType(ModalityType.APPLICATION_MODAL);
    	    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    	    setSize(315, 425);
    	}
	}
	class helpDialog extends JDialog {

    	/**
		 * 
		 */
		private static final long serialVersionUID = 6486862471198894327L;

		public helpDialog() {
    	    setTitle("Walkr: Help");
    	    setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
    	    setBackground(Color.WHITE);
    	    setVisible(true);
    	    JTextPane name = new JTextPane();
    		StyledDocument doc = name.getStyledDocument();
    		MutableAttributeSet standard = new SimpleAttributeSet();
    		name.setFont(new Font("seriff",Font.PLAIN,14));
    		StyleConstants.setAlignment(standard, StyleConstants.ALIGN_CENTER);
    	    StyleConstants.setFontSize(standard, 14);
    		doc.setParagraphAttributes(0,0,standard,true);
    		name.setStyledDocument(doc);
    	    name.setText("Walkr fetches a static map from the Google API centered on photos" +
    	    				"taken by students from the C343 Data Structures class.  The program" +
    	    				"then populates the graph with nodes from these photos and is able to find" +
    	    				"the shortest path between two buildings on the map." +
    	    				"\n In order to use Walkr, either enter building codes in the boxes provided or " +
    	    				"click on any two nodes then click calculate route.");
    	    name.setEditable(false);
    	    name.setAlignmentX(0.5f);
    	    add(name);
    	    setResizable(false);

    	    //add(Box.createRigidArea(new Dimension(0, 100)));
    	    setModalityType(ModalityType.APPLICATION_MODAL);
    	    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    	    setSize(500, 330);
    	}
    }	
	class PreferencesPanel extends JDialog {

		private static final long serialVersionUID = -3893376802979102050L;
		private final JPanel contentPanel = new JPanel();
		private JTextField txtCfall;
		/**
		 * Create the dialog.
		 */
		public PreferencesPanel() {
			add(contentPanel);
			setBounds(100, 100, 548, 275);
			setLayout(new BorderLayout());
			contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
			add(contentPanel, BorderLayout.CENTER);
			contentPanel.setLayout(null);
			contentPanel.setBackground(Color.WHITE);
			
			final JCheckBox enableTracker = new JCheckBox("Enabled");
			enableTracker.setToolTipText("A tracker represents the location of the current photo. It is a small icon that is displayed on the map.");
			enableTracker.setBounds(26, 66, 124, 23);
			contentPanel.add(enableTracker);
			enableTracker.setSelected(trackerEnabled);
			
			final JComboBox comboBox_tracker = new JComboBox();
			comboBox_tracker.setModel(new DefaultComboBoxModel(new String[] {"Reddit Alien", "Camera", "Flag", "Red Dot"}));
			comboBox_tracker.setName("");
			comboBox_tracker.setToolTipText("Pick a skin");
			comboBox_tracker.setBounds(27, 128, 139, 27);
			contentPanel.add(comboBox_tracker);
			
			JLabel lblPhotoTracker = new JLabel("Photo Tracker:");
			lblPhotoTracker.setBounds(16, 47, 124, 16);
			contentPanel.add(lblPhotoTracker);
			
			
			JLabel lblSkin = new JLabel("Icon:");
			lblSkin.setLabelFor(comboBox_tracker);
			lblSkin.setBounds(17, 104, 56, 16);
			contentPanel.add(lblSkin);
			
			
			JLabel lblMapLookAnd = new JLabel("Look and Feel:");
			lblMapLookAnd.setBounds(6, 19, 149, 16);
			contentPanel.add(lblMapLookAnd);
			
			
			final JComboBox comboBox_skin = new JComboBox();
			comboBox_skin.setModel(new DefaultComboBoxModel(new String[] {"Yellow", "Green", "Black"}));
			comboBox_skin.setBounds(209, 65, 128, 27);
			contentPanel.add(comboBox_skin);
			
			
			final JComboBox comboBox_map = new JComboBox();
			comboBox_map.setModel(new DefaultComboBoxModel(new String[] {"Hybrid", "Roadmap", "Satellite"}));
			comboBox_map.setBounds(209, 128, 128, 27);
			contentPanel.add(comboBox_map);
			
			
			JLabel lblProgramColor = new JLabel("Skin:");
			lblProgramColor.setBounds(185, 47, 61, 16);
			contentPanel.add(lblProgramColor);
			
			JLabel lblMapType = new JLabel("Map Type:");
			lblMapType.setBounds(187, 104, 87, 16);
			contentPanel.add(lblMapType);
			
			txtCfall = new JTextField();
			txtCfall.setText("c343_fall2010");
			txtCfall.setBounds(384, 45, 134, 28);
			contentPanel.add(txtCfall);
			txtCfall.setColumns(10);
			
			JLabel lblSearchTags = new JLabel("Search Tag:");
			lblSearchTags.setBounds(357, 19, 105, 16);
			contentPanel.add(lblSearchTags);

				JPanel buttonPane = new JPanel();
				buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
				add(buttonPane, BorderLayout.SOUTH);
					JButton okButton = new JButton("OK");
					okButton.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent arg0) {
							setVisible(false);
							int mapIndex = comboBox_map.getSelectedIndex();
							if(mapIndex > -1) {
								mapView.setMapType(comboBox_map.getModel().getElementAt(mapIndex).toString());
								mapView.updateUI();
							}
							comboBox_map.setSelectedIndex(mapIndex);
							if(enableTracker.isSelected()){
								if(walkr.hasPath()) {
									tracker.setVisible(true);
									trackerEnabled = true;
								} else {
									trackerEnabled = false;
									tracker.setVisible(false);
								}
							}
							int trackerIndex = comboBox_tracker.getSelectedIndex();
							if(trackerIndex > -1) {
								switch(trackerIndex) {
									case 0 : currentTrackerIcon = redditAlien; break;
									case 1 : currentTrackerIcon = cameraIcon; break;
									case 2 : currentTrackerIcon = flagIcon; break;
									default: currentTrackerIcon = redDotIcon; break;
								}
								comboBox_tracker.setSelectedIndex(trackerIndex);
								tracker.setIcon(currentTrackerIcon);
							}
							
							int skinIndex = comboBox_skin.getSelectedIndex();
							if(skinIndex > -1) {
								setSkin(comboBox_skin.getModel().getElementAt(skinIndex).toString());
							}
							comboBox_skin.setSelectedIndex(skinIndex);
						}
					});
				okButton.setMnemonic(KeyEvent.VK_ENTER);
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				JButton cancelButton = new JButton("Cancel");
				cancelButton.setActionCommand("Cancel");
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						setVisible(false);
					}
				});
				buttonPane.add(cancelButton);
				buttonPane.setBackground(Color.WHITE);
				
		
			}
		}
}