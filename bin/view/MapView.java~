package view;

import graph.Graph;
import graph.Node;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.w3c.dom.DOMException;

import collections.GoogleMap;

import walkr.Walkr;

public class MapView extends JLayeredPane {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5249083902963818957L;
	/**
	 * 
	 */
	private Graph graph;
	private Walkr walkr;
	protected int zoom = 15;
	protected GoogleMap map;
	private int WIDTH,HEIGHT;
	private JFrame frame;
	private JTextField fromField;
	private JTextField towardField;
	private boolean clicked;
	private Node fromNode, towardNode;
	private NodeView fromNodeView, towardNodeView;
	private String mapType = "hybrid";
	private JLabel mapPicture;
	private JPanel background;
	private JPanel foreground;
	protected String skin = "yellow";

	public String getSkin() {
		return skin;
	}

	public void setSkin(String skin) {
		this.skin = skin;
		updateNodes();
		foreground.updateUI();
		setLayer(foreground, Integer.MAX_VALUE);
	}

	/**
	 * Create the panel.
	 */
	public MapView(Walkr walkr, int width, int height) {
		super();
		this.walkr = walkr;
		this.graph = walkr.getGraph();
		this.WIDTH = width;
		this.HEIGHT = height;
        ImageIcon imageBack = new ImageIcon(getMap());
        walkr.setMap(map);
        setLayout(null);
        foreground = new JPanel();
        background = new JPanel();
        mapPicture = new JLabel(imageBack);
        foreground.setLayout(null);
        background.add(mapPicture);
        background.setBounds(0, 0, width, height);
		foreground.setOpaque(false);
       	foreground.setBounds(0, 0, width, height);
		add(foreground);
        updateNodes();
		add(background,Integer.MIN_VALUE);
	}
	
	public void updateNodes() {

		for(final Node n : graph.getNodes()) {
			final NodeView nodeView = new NodeView(n, skin);
			nodeView.setLocation(n.getPoint(map));
			foreground.add(nodeView);
			nodeView.setVisible(true);
			nodeView.addMouseListener(new MouseListener() {
				@Override
				public void mouseClicked(MouseEvent arg0) {
						if(!clicked) {
							setFrom(n);
							clicked = true;
						}
						else {
							clicked = false;
							setToward(n);
						}
						updateTextFields();
				}

				@Override
				public void mouseEntered(MouseEvent arg0) {
					frame.setCursor(new Cursor(Cursor.HAND_CURSOR));
				}

				@Override
				public void mouseExited(MouseEvent arg0) {
					frame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				}

				@Override
				public void mousePressed(MouseEvent arg0) {
				}

				@Override
				public void mouseReleased(MouseEvent arg0) {
				}
				
				public void setFrom(Node n) {
					if(fromNode != null) {
						fromNode.setSelected(false);
						fromNodeView.setIcon(new ImageIcon(fromNode.getImage(skin)));
					}
					n.setSelected(true);
					fromNode = n;
					fromNodeView = nodeView;
					nodeView.setIcon(new ImageIcon(n.getImage(skin)));
					nodeView.setText("From");
				}
				public void setToward(Node n) {
					if(towardNode != null) {
						towardNode.setSelected(false);
						towardNodeView.setIcon(new ImageIcon(towardNode.getImage(skin)));
					}
					n.setSelected(true);
					towardNode = n;
					towardNodeView = nodeView;
					nodeView.setIcon(new ImageIcon(n.getImage(skin)));
					nodeView.setText("Toward");
				}
			});
		}
	}
	
	public void setTextFields(JTextField from, JTextField toward) {
		this.fromField = from;
		this.towardField = toward;
	}
	public void updateTextFields() {
		if(fromNode != null)
			fromField.setText(fromNode.getName());
		if(towardNode != null)
			towardField.setText(towardNode.getName());	
	}
	
	public void setFrame(JFrame frame) {
		this.frame = frame;
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
	}

	
	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2 = (Graphics2D) g;
		if(walkr.hasPath())
			walkr.getPath().paint(g2,map);
	}

	public Dimension getPreferredSize() {
		return new Dimension(WIDTH, HEIGHT);
	}
	public void setMapType(String type) {
		this.mapType = type.toLowerCase();
		mapPicture.setIcon(new ImageIcon(getMap()));
		foreground.updateUI();
		setLayer(foreground, Integer.MAX_VALUE);
	}
	private BufferedImage getMap() {
		//get the map by finding the center of the right/left most lat and top/bottommost lon
		BufferedImage image = null;
		String center = graph.getCenter();
		URL imageURL = null;
		try {
			imageURL = new URL(	"http://maps.google.com/maps/api/staticmap?center=" + center + "&zoom=" + zoom + "&size=" +
					WIDTH + "x" + HEIGHT + "&maptype=" + mapType + "&sensor=true");
			} catch (MalformedURLException e1) {
		} catch (DOMException e1) {
		}
		try {
		image = ImageIO.read(imageURL);
		System.out.println("Got the map from google");
		} catch (IOException e) {
			System.out.println("Couldn't read photo.");
	}
		String[] latlon = center.split(",");
		this.map = new GoogleMap(Double.valueOf(latlon[0]),Double.valueOf(latlon[1]), zoom, WIDTH, HEIGHT);
		return image;
	}
	
	
}
