	package flickr;
	
	import graph.Graph;

import java.awt.image.BufferedImage;
	import java.io.BufferedReader;
	import java.io.IOException;
	import java.io.InputStreamReader;
	import java.net.HttpURLConnection;
	import java.net.MalformedURLException;
	import java.net.URL;
	import java.util.ArrayList;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	
	import javax.imageio.ImageIO;
	import javax.xml.xpath.XPathConstants;
	
	import org.w3c.dom.DOMException;
import org.w3c.dom.NodeList;
	
	/**
	 * Flickr
	 * 
	 * Handles the retrieval of photos via Flick RESTs
	 * 
	 * @author krmckelv, Karissa McKelvey
	 * @author fmackey, Frank Mackey
	 * @author ppitzer, Phil Pitzer
	 */
	
	
	public class Flickr {
	
		private static String api_key = "e7027a5e1ea23330d7d79603cf366e35";
		private ArrayList<Photo> geoPhotos;
		private boolean geotagged;
		private int pages = 1;
		private int currentPage = 0;
		private String TOWARD_PATTERN = "toward\\w+";
		private String FROM_PATTERN = "from\\w+";
		private String NODE_PATTERN = "node\\w+";
		private String[] PATTERNS = new String[] {TOWARD_PATTERN, FROM_PATTERN};
		private Graph graph;
	
		public boolean isGeotagged() {
			return geotagged;
		}
	
		public void setGeotagged(boolean geotagged) {
			this.geotagged = geotagged;
		}
		
	
		public ArrayList<Photo> getGeoPhotos() {
			return geoPhotos;
		}//getPhotos()
	
		/**
		 * Constructs a Flickr object that is capable of searching Flickr
		 * and storing the resulting Photo data in a GrowableArray
		 */
		
		public Flickr(Graph graph) {
			geoPhotos = new ArrayList<Photo>();
			this.graph = graph;
		}//Flickr()
		
		// code for making a restful Get request
		public static String httpGet(String urlStr) throws IOException {
			  URL url = new URL(urlStr);
			  HttpURLConnection conn =
			      (HttpURLConnection) url.openConnection();
	
			  if (conn.getResponseCode() != 200) {
			    throw new IOException(conn.getResponseMessage());
			  }
	
			  // Buffer the result into a string
			  BufferedReader rd = new BufferedReader(
			      new InputStreamReader(conn.getInputStream()));
			  StringBuilder sb = new StringBuilder();
			  String line;
			  while ((line = rd.readLine()) != null) {
			    sb.append(line);
			  }
			  rd.close();
	
			  conn.disconnect();
			  return sb.toString();
			}//httpGet(String urlStr)
	
		public String flickrSearch(String tags) throws IOException {
				String url = "http://api.flickr.com/services/rest/?method=flickr.photos.search"; 
				url += "&api_key=" + api_key;
				url += "&tags=" + tags;
				url += "&has_geo=true";
				url += "&extras=geo,tags";
				url += "&per_page=500";
				url += "&page=" + currentPage;
			    return Flickr.httpGet(url);
		}//flickrSearch (String tags)
		
		/** 
		 * Takes a Photo and builds the proper URL from the Photos
		 * meta data to pass to the ImageIO class which reads it and returns that image
		 * @return an Image object representing the Photo object
		 * @param photo the photo to get from Flickr
		 */
		
		public static BufferedImage getImage(Photo photo) {
			BufferedImage image = null;
			String xml = null;
			URL imageURL = null;
			String url = "http://api.flickr.com/services/rest/?method=flickr.photos.getSizes";
			url += "&api_key=" + api_key;
			url += "&photo_id=" + photo.getImageID();
			
			try {
				xml = Flickr.httpGet(url);
			} catch (IOException e1) {
				System.out.println("Couldn't get the xml for that url");
			}
			XPathReader reader = new XPathReader(xml);
			NodeList nodes = (NodeList) reader.read("//size", XPathConstants.NODESET);
			for(int i = 0; i < 5 && i < nodes.getLength(); i++) {
				url = nodes.item(i).getAttributes().getNamedItem("source").getNodeValue();
			}
			
				try {
					imageURL = new URL(url);
				} catch (MalformedURLException e1) {
			} catch (DOMException e1) {
			}
			try {
				image = ImageIO.read(imageURL);
				} catch (IOException e) {
					System.out.println("Couldn't read photo.");
			}
			
			
			return image;
		}//getImage(Photo)

		public static BufferedImage getImage(String url) {
			BufferedImage image = null;
			URL imageURL = null;
				try {
					imageURL = new URL(url);
				} catch (MalformedURLException e1) {
			} catch (DOMException e1) {
			}
			try {
				image = ImageIO.read(imageURL);
				} catch (IOException e) {
					System.out.println("Couldn't read photo.");
			}
			
			
			return image;
		}//getImage(Photo)
		
		public String[] getTitles(int n, ArrayList<Photo> photos) {
			int size = Math.min(n, photos.size());
			String[] toReturn = new String[size];
				
			for (int i = 0; i < size; i++) {
				toReturn[i] = photos.get(i).getTitle();
			}
			this.geoPhotos = photos;
			return toReturn;
			
		}
		public String[] getIDS(int n, ArrayList<Photo> photos) {
			int size = Math.min(n, photos.size());
			String[] toReturn = new String[size];
			
			for (int i = 0; i < size; i++) {
				toReturn[i] = photos.get(i).getImageID();
			}
			this.geoPhotos = photos;
			return toReturn;
		}
		
	 
		//find photos for one tag
		public void findPhotosByTag(String tag) {
			String xml = null;
			currentPage = 1;
			while(currentPage <= pages) {
				try {
					xml = flickrSearch(tag);
				} catch (IOException e) {
					e.printStackTrace();
				}
				XPathReader reader = new XPathReader(xml);
				NodeList page = (NodeList) reader.read("//photos", XPathConstants.NODESET);
				String pageStr = page.item(0).getAttributes().getNamedItem("pages").getNodeValue();				
				this.pages = Integer.parseInt(pageStr);
				currentPage++;
				processPhotos(xml);
			}
		}
		
		/** Sets the photo with the appropriate tags; 
		 * assumes the tags are organized according to the following:
		 * node{buildingcode}
		 * OR BOTH
		 * toward{buildlingcode}
		 * from{buildingcode}
		 * @param photo
		 * @param tags
		 */
		public void processTags(Photo photo, String tags) {
			Pattern p = Pattern.compile(NODE_PATTERN);
			Matcher node = p.matcher(tags);
			if(node.find()) {//Photo has been ID'ed as a node
				photo.setNodeName(node.group().substring(4).toUpperCase());
			}
			else {//photo has been ID'ed as being on an edge
				p = Pattern.compile(TOWARD_PATTERN);  
				Matcher toward = p.matcher(tags);
				if(toward.find()) {
						photo.setToward(toward.group().substring(6).toUpperCase());	
				}
				p = Pattern.compile(FROM_PATTERN);  
				Matcher from = p.matcher(tags);
				if(from.find()) {
					photo.setFrom(from.group().substring(4).toUpperCase());
				}
			}
			if(photo.isNode() || photo.isEdge())
				graph.parse(photo);
		}
		
		private void processPhotos(String xml) {
			XPathReader reader = new XPathReader(xml);
			NodeList nodes = (NodeList) reader.read("//photo", XPathConstants.NODESET);
			Photo toAdd;
			for (int i = 0; i < nodes.getLength(); i++) {
				toAdd = new Photo();
				toAdd.setImageID(nodes.item(i).getAttributes().getNamedItem("id").getNodeValue());
				toAdd.setSecret(nodes.item(i).getAttributes().getNamedItem("secret").getNodeValue());
				toAdd.setFarmID(nodes.item(i).getAttributes().getNamedItem("farm").getNodeValue());
				toAdd.setTitle(nodes.item(i).getAttributes().getNamedItem("title").getNodeValue());
				toAdd.setServerID(nodes.item(i).getAttributes().getNamedItem("server").getNodeValue());
				toAdd.setLatitude(nodes.item(i).getAttributes().getNamedItem("latitude").getNodeValue());
				toAdd.setLongitude(nodes.item(i).getAttributes().getNamedItem("longitude").getNodeValue());
				processTags(toAdd, nodes.item(i).getAttributes().getNamedItem("tags").getNodeValue());
				geoPhotos.add(toAdd);
			}
			System.out.println("found " + geoPhotos.size() + " photos");
		}
		
	}